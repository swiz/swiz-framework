<!--
	Swiz Framework build file
-->
<project name="swiz-framework" basedir="../" default="compile">

	<!-- ============================== -->
	<!--  Configuration -->
	<!-- ============================== -->
	
	<property environment="env" />
	
	<!-- Configuration -->
	<property file="${basedir}/build/build.properties" />
	
	<!-- Setup Flex Ant Resources -->
	<property name="FLEX_HOME" location="${flex.sdk}" />
	<!--property name="FLEX_HOME" location="${env.FLEX_HOME}" /-->
	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />
	
	<!-- ============================== -->
	<!--  Clean and Init Targets -->
	<!-- ============================== -->
	
	<target name="clean" description="Removes artifacts from previous builds">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${bin.loc}" defaultexcludes="false">
				<include name="**/*" />
			</fileset>
			<fileset dir="${test.bin.loc}" defaultexcludes="false">
				<include name="**/*" />
			</fileset>
			<fileset dir="${docs}" defaultexcludes="false">
				<include name="**/*" />
			</fileset>
			<fileset dir="${dist.loc}" defaultexcludes="false">
				<include name="**/*" />
			</fileset>
			<fileset dir="${report.loc}" defaultexcludes="false">
				<include name="**/*" />
			</fileset>
		</delete>
	</target>
	
	<target name="init" description="Initializes project and destination folders">
		<echo message="Project: ${ant.project.name}" />
		<echo message="Flex SDK: ${FLEX_HOME}" />

		<!-- Create direectories -->
		<mkdir dir="${bin.loc}" />
		<mkdir dir="${test.bin.loc}" />
		<mkdir dir="${docs.loc}" />
		<mkdir dir="${dist.loc}" />
		<mkdir dir="${report.loc}" />
	</target>
	
	<!-- ======================================= -->
	<!--  Compile, Document, and Package Targets -->
	<!-- ======================================= -->
	
	<target name="compile" depends="init" description="Compile the library .swc file">

		<!-- set up list of classes to include in library -->
		<fileset id="src.include.fileset" dir="${src.loc}">
			<include name="**/*.as" />
		</fileset>
		<property name="src.include.fileset" refid="src.include.fileset" />

		<!-- Convert the test files into a compiler friendly format. -->
		<pathconvert property="src.include.classes" pathsep=" " refid="src.include.fileset">
		        <compositemapper>
		                <chainedmapper>
		                        <globmapper from="${src.loc}/*" to="*" handledirsep="true" />
		                        <mapper type="package" from="*.as" to="*" />
		                </chainedmapper>
		        </compositemapper>
		</pathconvert>
		
		<compc output="${bin.loc}/${swiz.name}.swc" include-classes="${src.include.classes}">
			<source-path path-element="${src.loc}" />
			
			<namespace uri="${swiz.namespace}" manifest="${src.loc}/manifest.xml" />
			<include-namespaces uri="${swiz.namespace}" />
			
			<include-file name="metadata.xml" path="${src.loc}/metadata.xml" />
			<include-file name="design.xml" path="${src.loc}/design.xml" />
			
			<!-- add flex3/flex4 compiler arg -->
			<compiler.define name="CONFIG::flex3" value="false" />
			<compiler.define name="CONFIG::flex4" value="true" />
			
			<!-- Configure the flex framework libraries as external link dependencies -->
			<external-library-path dir="${FLEX_HOME}/frameworks" append="true">
				<include name="libs" />
				<include name="locale/{locale}" />
			</external-library-path>
			
			<keep-as3-metadata name="Autowire"/>
			<keep-as3-metadata name="Dispatcher"/>
			<keep-as3-metadata name="EventHandler"/>
			<keep-as3-metadata name="Inject"/>
			<keep-as3-metadata name="Mediate"/>
			<keep-as3-metadata name="PostConstruct"/>
			<keep-as3-metadata name="PreDestroy"/>
			<keep-as3-metadata name="ViewAdded"/>
			<keep-as3-metadata name="ViewRemoved"/>

			<!-- Sets java.awt.headless=true so font compilation works in headless environments -->
			<headless-server>true</headless-server>
		</compc>
		
		<echo message="${swiz.name}.swc has been created in ${bin.loc}" />
		
		<compc output="${bin.loc}/${swiz.name.flex3}.swc" include-classes="${src.include.classes}">
			<source-path path-element="${src.loc}" />
			
			<namespace uri="${swiz.namespace}" manifest="${src.loc}/manifest.xml" />
			<include-namespaces uri="${swiz.namespace}" />
			
			<include-file name="metadata.xml" path="${src.loc}/metadata.xml" />
			<include-file name="design.xml" path="${src.loc}/design.xml" />
			
			<!-- add flex3/flex4 compiler arg -->
			<compiler.define name="CONFIG::flex3" value="true" />
			<compiler.define name="CONFIG::flex4" value="false" />
			
			<!-- Configure the flex framework libraries as external link dependencies -->
			<external-library-path dir="${FLEX_HOME}/frameworks" append="true">
				<include name="libs" />
				<include name="locale/{locale}" />
			</external-library-path>
			
			<keep-as3-metadata name="Autowire"/>
			<keep-as3-metadata name="Dispatcher"/>
			<keep-as3-metadata name="EventHandler"/>
			<keep-as3-metadata name="Inject"/>
			<keep-as3-metadata name="Mediate"/>
			<keep-as3-metadata name="PostConstruct"/>
			<keep-as3-metadata name="PreDestroy"/>
			<keep-as3-metadata name="ViewAdded"/>
			<keep-as3-metadata name="ViewRemoved"/>

			<!-- Sets java.awt.headless=true so font compilation works in headless environments -->
			<headless-server>true</headless-server>
		</compc>
		
		<echo message="${swiz.name.flex3}.swc has been created in ${bin.loc}" />
	</target>
	
	<target name="asdoc" depends="init" description="Generate ASDoc documentation">
		<java jar="${FLEX_HOME}/lib/asdoc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
			<arg line="-doc-sources ${src.loc}"/>
			
			<!-- <arg line="-namespace ${swiz.namespace} ${src.loc}/manifest.xml " />
			<arg line="-doc-namespaces ${swiz.namespace}" /> -->
			
			<arg line="-source-path ${src.loc}"/>
			<arg line="-output ${docs.loc}"/>
			<arg line="-window-title 'Swiz ${swiz.version}'"/>
			<arg line="-define+=CONFIG::flex3,false" />
			<arg line="-define+=CONFIG::flex4,true" />
		</java>
		
		<echo message="${swiz.name} documentation has been created in ${docs.loc}" />
	</target>
	
	<target name="package" depends="clean, compile, asdoc" description="Prepares and assembles the .zip artifact with the .swc libraries, source files and corresponding ASDoc documentation">
		<zip destfile="${dist.loc}/${swiz.name}.zip">
			<!-- Include the library .swc files -->
			<zipfileset dir="${bin.loc}" prefix="${swiz.name}">
				<include name="${swiz.name}.swc" />
			</zipfileset>
			<zipfileset dir="${bin.loc}" prefix="${swiz.name}">
				<include name="${swiz.name.flex3}.swc" />
			</zipfileset>
			
			<!-- Include README.markdown -->
			<zipfileset dir="${basedir}" prefix="${swiz.name}">
				<include name="README.markdown" />
			</zipfileset>
							
			<!-- Include LICENSE -->
			<zipfileset dir="${basedir}" prefix="${swiz.name}">
				<include name="LICENSE" />
			</zipfileset>
			
			<!-- Include the ASDocs in the asdocs folder of the zip -->
			<zipfileset dir="${docs.loc}" prefix="${swiz.name}/asdocs" />
			
			<!-- Include the source code in the source folder of the zip -->
			<zipfileset dir="${src.loc}" prefix="${swiz.name}/source" />
		</zip>
		
		<echo message="The ${swiz.name}.zip distribution package has been created in ${dist.loc}" />
	</target>
	
	<!-- ============================== -->
	<!--  Unit Test Targets -->
	<!-- ============================== -->
		
	<target name="compileTestRunner" depends="init" description="Compiles the test runner application.">
			
		<!-- Compile TestRunner.mxml as a SWF -->
		<mxmlc file="${test.src.loc}/${test.application.name}" output="${test.bin.loc}/${test.artifact.name}">
			<compiler.source-path path-element="${src.loc}" />
			<compiler.source-path path-element="${test.src.loc}" />
			
			<!-- The TestRunner needs the flexunit libraries in the build/libs folder -->
			<library-path dir="${build.libs.loc}" append="true">
				<include name="*.swc" />
			</library-path>
			
			<!-- Sets java.awt.headless=true so font compilation works in headless environments -->
			<compiler.headless-server>true</compiler.headless-server>
		</mxmlc>
		
		<echo message="The ${test.artifact.name} test runner has been created in ${test.bin.loc}" />
	</target>
	
	<target name="runTestsAndReport" depends="init" description="Launches the test runner, captures results, generates test report artifacts.">
		<!-- Run FlexUnit Ant Task to execute the unit tests and capture reporting data -->
		<taskdef resource="flexUnitTasks.tasks" classpath="${build.libs.loc}/flexUnitTasks-4.0.0.jar" />
		<flexunit swf="${test.bin.loc}/${test.artifact.name}" toDir="${report.loc}"
			haltonfailure="false" verbose="false" localTrusted="false" player="flash" /> <!-- player="air" -->
	
		<!-- Generate html JUnit-style reports based on test results -->
		<junitreport todir="${report.loc}">
			<fileset dir="${report.loc}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${report.html.loc}" />
		</junitreport>
		
		<echo message="The unit test reports have been created in ${report.loc}" />
	</target>
	
	<target name="test" depends="clean, compileTestRunner, runTestsAndReport" description="Compiles unit tests and generates test report artiacts." />

</project>